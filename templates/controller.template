var request = require('supertest'),
    should = require('should'),
    Barrels = require('barrels'),
    barrels = new Barrels();


var <%= modelPlural %> = barrels.data['<%= modelPlural %>'],
    users = barrels.data['users'],
    organizations = barrels.data['organization'],
    token = '';

var requiredAttributes = <%= generateRequiredAttributes(requiredAttributes) %>;

describe('<%= controller %>', function () {

    before("create <%= modelPlural %> records for update and delete operations", function (done) {

        <%= modelPlural %>.valid.default.organization = organizations.default.id;
        <%= modelPlural %>.valid.update.organization = organizations.default.id;
        <%= modelPlural %>.valid.delete.organization = organizations.default.id;

        var create<%= modelCapitalized %>Array = [<%= modelPlural %>.valid.default, <%= modelPlural %>.valid.update, <%= modelPlural %>.valid.delete];
        <%= modelCapitalized %>.create(create<%= modelCapitalized %>Array).spread(function (default<%= modelCapitalized %>, update<%= modelCapitalized %>, delete<%= modelCapitalized %>) {
            <%= modelPlural %>.valid.default.id = default<%= modelCapitalized %>.id;
            <%= modelPlural %>.valid.update.id = update<%= modelCapitalized %>.id;
            <%= modelPlural %>.valid.delete.id = delete<%= modelCapitalized %>.id;
            return done();
        });

    });

    before("login and get user token", function (done) {
        request(sails.hooks.http.app)
            .post('/login')
            .send(users.valid.default)
            .send(users.valid.default)
            .end(function (err, res) {
                if (err) return done(err);
                if (res) {
                    token = res.body.response.data.token;
                }
                return done();
            })
    });


    describe("create(): [POST /<%= model %>]", function() {


        it("should return 400: no parameters passed", function (done) {

            request(sails.hooks.http.app)
                .post('/<%= model %>')
                .set('Authorization', 'Bearer ' + token)
                .send({})
                .expect(400)
                .end(function(err, res) {
                    if (err) return done(err);

                    res.body.should.have.property('response');
                    res.body.response.should.have.property('message');
                    res.body.response.should.have.property('errors');

                    return done();
                });

        });

<%_.forEach(requiredAttributes, function (attribute, index){%>
        it('should return 400: no <%=attribute.__name%>', function (done) {

            request(sails.hooks.http.app)
                .post('/<%=model%>')
                .set('Authorization', 'Bearer ' + token)
                .send(<%=modelPlural%>.invalid.no<%=_.str.capitalize(attribute.__name)%>)
                .expect(400)
                .end(function (err, res) {
                    if (err) return done(err);

                    res.body.should.have.property('response');
                    res.body.response.should.have.property('message');
                    res.body.response.message.should.containEql('Validation error has occurred');
                    res.body.response.should.have.property('errors');
                    res.body.response.errors.should.have.property('<%=attribute.__name%>');<%if(attribute.validationMessages){%>
                    res.body.response.errors.<%=attribute.__name%>.should.containEql(<%=JSON.stringify(attribute.validationMessages[0])%>);<%}%>

                    return done();
                });

        });
<%});%>


<%_.forEach(modelAttributes, function (attribute, index){%>
        it('should return 400: invalid <%=attribute.__name%>', function (done) {

            request(sails.hooks.http.app)
                .post('/<%=model%>')
                .set('Authorization', 'Bearer ' + token)
                .send(<%=modelPlural%>.invalid.invalid<%=_.str.capitalize(attribute.__name)%>)
                .expect(400)
                .end(function (err, res) {
                    if (err) return done(err);

                    res.body.should.have.property('response');
                    res.body.response.should.have.property('message');
                    res.body.response.should.have.property('errors');
                    return done();
                });

        });
<%});%>

        it("should return 200: <%= model %> created successfully", function (done) {

            request(sails.hooks.http.app)
                .post('/<%= model %>')
                .set('Authorization', 'Bearer ' + token)
                .send(<%= modelPlural %>.valid.create)
                .expect(200)
                .end(function(err, res) {
                    if (err) return done(err);

                    res.body.should.have.property('response');
                    res.body.response.should.have.property('message');
                    res.body.response.should.have.property('data');
                    Object.keys(res.body.response.data).length.should.be.above(0);
                    res.body.response.data.should.have.properties(requiredAttributes);

                    return done();
                });

        });


    });


    describe("#read(): [GET /<%= model %>/:id]", function () {


        it('should return 404: "no <%= model %> found"', function (done) {

            request(sails.hooks.http.app)
                .get('/<%= model %>/invalid')
                .set('Authorization', 'Bearer ' + token)
                .expect(404)
                .end(function (err, res) {
                    if (err) return done(err);

                    res.body.should.have.property('response');
                    res.body.response.should.have.property('message');
                    res.body.response.data.should.have.properties(requiredAttributes);

                    return done();
                });

        });

        it('should return 200: "found <%= model %>"', function (done) {

            request(sails.hooks.http.app)
                .get('/<%= model %>/' + <%= modelPlural %>.valid.default.id)
                .set('Authorization', 'Bearer ' + token)
                .expect(200)
                .end(function (err, res) {
                    if (err) return done(err);

                    res.body.should.have.property('response');
                    res.body.response.should.have.property('message');
                    res.body.response.should.have.property('data');
                    res.body.response.data.should.have.property('organization');
                    res.body.response.data.should.have.properties(requiredAttributes);

                    return done();
                });

        });


    });


    describe("#list(): [GET /<%= model %>]", function () {

        it('should return 200: "found <%= modelPlural %>"', function (done) {

            request(sails.hooks.http.app)
                .get('/<%= model %>')
                .set('Authorization', 'Bearer ' + token)
                .expect(200)
                .end(function (err, res) {
                    if (err) return done(err);

                    res.body.should.have.property('response');
                    res.body.response.should.have.property('message');
                    res.body.response.should.have.property('data');
                    res.body.response.data.should.be.an.Array;
                    res.body.response.data.length.should.be.above(0);

                    return done();
                });

        });

    });



    describe("update(): [PUT /<%= model %>/:id]", function () {


        it("should return 404: invalid <%= model %>", function (done) {

            request(sails.hooks.http.app)
                .put('/<%= model %>/invalid')
                .set('Authorization', 'Bearer ' + token)
                .send({})
                .expect(404)
                .end(function (err, res) {
                    if (err) return done(err);

                    res.body.should.have.property('response');
                    res.body.response.should.have.property('message');

                    return done();
                });
        });

        it("should return 200: updated <%= model %>", function (done) {

            var updateData = {};
            request(sails.hooks.http.app)
                .put('/<%= model %>/' + <%= modelPlural %>.update.id)
                .set('Authorization', 'Bearer ' + token)
                .send(updateData)
                .expect(200)
                .end(function (err, res) {
                    if (err) return done(err);

                    res.body.should.have.property('response');
                    res.body.response.should.have.property('message');
                    res.body.response.should.have.property('data');
                    res.body.response.data.should.have.properties(requiredAttributes);

                    return done();
                });

            });

    });


    describe("delete(): [DELETE /<%= model %>/:id]", function () {

        it("should return 404: invalid <%= model %>", function (done) {

            request(sails.hooks.http.app)
                .delete('/<%= model %>/invalid')
                .set('Authorization', 'Bearer ' + token)
                .expect(404)
                .end(function (err, res) {
                    if (err) return done(err);

                    res.body.should.have.property('response');
                    res.body.response.should.have.property('message');

                    return done();
                });
        });

        it("should return 200: delete <%= model %> successfully", function (done) {

            request(sails.hooks.http.app)
                .delete('/<%= model %>/' + <%= modelPlural %>.delete.id)
                .set('Authorization', 'Bearer ' + token)
                .expect(200)
                .end(function (err, res) {
                    if (err) return done(err);

                    res.body.should.have.property('response');
                    res.body.response.should.have.property('message');

                    return done();
                });
        });


    });


    after("delete all created <%= modelPlural %> asides the default", function (done) {
        <%= modelCapitalized %>.destroy({id: {'!': <%= modelPlural %>.valid.default.id}}).then(function() {
            return done();
        });
    });

});